'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DnsProve = require('@ensdomains/dnsprovejs');
var artifact = require("../build/contracts/DNSRegistrar.json");
var Web3 = require('web3');
var abi = artifact.abi;
var packet = require('dns-packet');

var Claim = function () {
    function Claim(_ref) {
        var oracle = _ref.oracle,
            registrar = _ref.registrar,
            result = _ref.result,
            textDomain = _ref.textDomain,
            encodedName = _ref.encodedName;

        _classCallCheck(this, Claim);

        this.oracle = oracle;
        this.registrar = registrar;
        this.result = result;
        this.textDomain = textDomain;
        this.encodedName = encodedName;
    }

    /**
     * returns `Oracle <https://dnsprovejs.readthedocs.io/en/latest/libraries.html#oracle>`_ object
     */


    _createClass(Claim, [{
        key: 'getOracle',
        value: function getOracle() {
            return this.oracle;
        }

        /**
         * returns `DnsResult <https://dnsprovejs.readthedocs.io/en/latest/libraries.html#dnsresult>`_ object
         */

    }, {
        key: 'getResult',
        value: function getResult() {
            return this.result;
        }

        /**
         * returns owner ETH address from the DNS record.
         */

    }, {
        key: 'getOwner',
        value: function getOwner() {
            return this.result.results[this.result.results.length - 1].rrs[0].data[0].toString().split('=')[1];
        }
    }, {
        key: 'getProven',
        value: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.oracle.getProven(this.result);

                            case 2:
                                return _context.abrupt('return', _context.sent);

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getProven() {
                return _ref2.apply(this, arguments);
            }

            return getProven;
        }()
    }, {
        key: 'submitAll',
        value: function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.oracle.submitAll(this.result, params);

                            case 2:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function submitAll() {
                return _ref3.apply(this, arguments);
            }

            return submitAll;
        }()

        /**
         * Either submit or delete proof depending on the state of DNSRecord and DNSSEC Oracle
         * 
         * - it deletes an entry if DNS record returns NSEC/NSEC3(Next Secure)
         * - it submits proof to DNSSEC Oracle contract if not all proofs are in the contract
         * - it submits proof to DNSSEC Oracle contract and claims via DNSRegistrar contract if not all proofs are in the DNSSEC Oracle contract
         * 
         * @param {Object} params - optional parameter to send to smart contract, such as from, gas, etc
         */

    }, {
        key: 'submit',
        value: function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var result, proofs, data, allProven;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                result = this.result;

                                if (!result.nsec) {
                                    _context3.next = 9;
                                    break;
                                }

                                proofs = this.result.proofs;
                                _context3.next = 5;
                                return this.oracle.deleteProof('TXT', this.textDomain, proofs[proofs.length - 1], proofs[proofs.length - 2], params);

                            case 5:
                                _context3.next = 7;
                                return this.registrar.methods.claim(this.encodedName, '0x').send(params);

                            case 7:
                                _context3.next = 26;
                                break;

                            case 9:
                                if (!result.found) {
                                    _context3.next = 25;
                                    break;
                                }

                                _context3.next = 12;
                                return this.oracle.getAllProofs(result, params);

                            case 12:
                                data = _context3.sent;
                                _context3.next = 15;
                                return this.oracle.allProven(result);

                            case 15:
                                allProven = _context3.sent;

                                if (!allProven) {
                                    _context3.next = 21;
                                    break;
                                }

                                _context3.next = 19;
                                return this.registrar.methods.claim(this.encodedName, data[1]).send(params);

                            case 19:
                                _context3.next = 23;
                                break;

                            case 21:
                                _context3.next = 23;
                                return this.registrar.methods.proveAndClaim(this.encodedName, data[0], data[1]).send(params);

                            case 23:
                                _context3.next = 26;
                                break;

                            case 25:
                                throw "Nothing to prove";

                            case 26:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function submit() {
                return _ref4.apply(this, arguments);
            }

            return submit;
        }()
    }]);

    return Claim;
}();

var DNSRegistrar = function () {
    function DNSRegistrar(provider, registrarAddress) {
        _classCallCheck(this, DNSRegistrar);

        var web3 = new Web3(provider);
        this.registrar = new web3.eth.Contract(abi, registrarAddress);
        this.dnsprover = new DnsProve(provider);
    }
    /**
     * returns a claim object which allows you to claim
     * the ownership of a given name on ENS by submitting the proof
     * into DNSSEC oracle as well as claiming the name via the registrar
     * @param {string} name - name of the domain you want to claim
     */


    _createClass(DNSRegistrar, [{
        key: 'claim',
        value: function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(name) {
                var encodedName, textDomain, result, oracle;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (this.oracleAddress) {
                                    _context4.next = 4;
                                    break;
                                }

                                _context4.next = 3;
                                return this.registrar.methods.oracle().call();

                            case 3:
                                this.oracleAddress = _context4.sent.toLowerCase();

                            case 4:
                                encodedName = '0x' + packet.name.encode(name).toString('hex');
                                textDomain = '_ens.' + name;
                                _context4.next = 8;
                                return this.dnsprover.lookup('TXT', textDomain);

                            case 8:
                                result = _context4.sent;
                                _context4.next = 11;
                                return this.dnsprover.getOracle(this.oracleAddress);

                            case 11:
                                oracle = _context4.sent;
                                return _context4.abrupt('return', new Claim({
                                    oracle: oracle,
                                    result: result,
                                    registrar: this.registrar,
                                    textDomain: textDomain,
                                    encodedName: encodedName
                                }));

                            case 13:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function claim(_x3) {
                return _ref5.apply(this, arguments);
            }

            return claim;
        }()
    }]);

    return DNSRegistrar;
}();

module.exports = DNSRegistrar;